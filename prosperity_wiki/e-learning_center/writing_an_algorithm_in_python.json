[
  {
    "type": "h1",
    "content": "Writing an Algorithm in Python"
  },
  {
    "type": "p",
    "content": "The explanation below assumes familiarity with the basics of Object-Oriented Programming in Python. To refresh this knowledge you can have a look at the source provided on the üéìProgramming resources."
  },
  {
    "type": "h3",
    "content": "The Challenge"
  },
  {
    "type": "p",
    "content": "For the algorithmic trading challenge, you will be writing and uploading a trading algorithm class in Python, which will then be set loose on the island exchange. On this exchange, the algorithm will trade against a number of bots, with the aim of earning as many SeaShells (the currency of the archipelago) as possible. The algorithmic trading challenge consists of several rounds, that take place on different days of the challenge. At the beginning of each round, it is disclosed which new products will be available for trading on that day. Sample data for these products is provided that players can use to get a better understanding of the price dynamics of these products, and consequently build a better algorithm for trading them. While most days will feature new products, the old products will also still be tradable in the rounds after which they are introduced. This means that based on the result of the previous rounds, players also have the opportunity to analyse and optimise their trading strategies for these ‚Äúold‚Äù products."
  },
  {
    "type": "p",
    "content": "The format for the trading algorithm will be a predefined Trader class, which has a single method called run which contains all the trading logic coded up by the trader. Once the algorithm is uploaded it will be run in the simulation environment. The simulation consists of a large number of iterations. During each iteration the run method will be called and provided with a TradingState object. This object contains an overview of all the trades that have happened since the last iteration, both the algorithms own trades as well as trades that happened between other market participants. Even more importantly, the TradingState will contain a per product overview of all the outstanding buy and sell orders (also called ‚Äúquotes‚Äù) originating from the bots. Based on the logic in the run method the algorithm can then decide to either send orders that will fully or partially match with the existing orders, e.g. sending a buy (sell) order with a price equal to or higher (lower) than one of the outstanding bot quotes, which will result in a trade. If the algorithm sends a buy (sell) order with an associated quantity that is larger than the bot sell (buy) quote that it is matched to, the remaining quantity will be left as an outstanding buy (sell) quote with which the trading bots will then potentially trade. When the next iteration begins, the TradingState will then reveal whether any of the bots decided to ‚Äútrade on‚Äù the player‚Äôs outstanding quote. If none of the bots trade on an outstanding player quote, the quote is automatically cancelled at the end of the iteration."
  },
  {
    "type": "p",
    "content": "Every trade done by the algorithm in a certain product changes the ‚Äúposition‚Äù of the algorithm in that product. E.g. if the initial position in product X was 2 and the algorithm buys an additional quantity of 3, the position in product X is then 5. If the algorithm then subsequently sells a quantity of 7, the position in product X will be -2, called ‚Äúshort 2‚Äù. Like in the real world, the algorithms are restricted by per product position limits, which define the absolute position (long or short) that the algorithm is not allowed to exceed. If the aggregated quantity of all the buy (sell) orders an algorithm sends during a certain iteration would, if all fully matched, result in the algorithm obtaining a long (short) position exceeding the position limit, all the orders are cancelled by the exchange."
  },
  {
    "type": "p",
    "content": "In the first section, the general outline of the Trader class that the player will be creating is outlined."
  },
  {
    "type": "h3",
    "content": "Overview of the Trader class"
  },
  {
    "type": "p",
    "content": "Below an abstract representation of what the trader class should look like is shown. The class only requires a single method called run, which is called by the simulation every time a new TraderState is available. The logic within this run method is written by the player and determines the behaviour of the algorithm. The output of the method is a dictionary named result, which contains all the orders that the algorithm decides to send based on this logic."
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_1",
    "file_path": "code/overview_of_trader_class.py",
    "preview": "from datamodel import OrderDepth, UserId, TradingS..."
  },
  {
    "type": "p",
    "content": "Example implementation above presents placing order idea as well."
  },
  {
    "type": "p",
    "content": "When you send the Trader implementation there is always submission identifier generated. It‚Äôs UUID value similar to ‚Äú59f81e67-f6c6-4254-b61e-39661eac6141‚Äù. Should any questions arise on the results, feel free to communicate on Discord channels. Identifier is absolutely essential to answer questions. Please put it in the message."
  },
  {
    "type": "p",
    "content": "Technical implementation for the trading container is based on Amazon Web Services Lambda function. Based on the fact that Lambda is stateless AWS can not guarantee any class or global variables will stay in place on subsequent calls. We provide possibility of defining a traderData string value as an opportunity to keep the state details. Any Python variable could be serialised into string with jsonpickle library and deserialised on the next call based on TradingState.traderData property. Container will not interfere with the content."
  },
  {
    "type": "p",
    "content": "To get a better feel for what this TradingState object is exactly and how players can use it, a description of the class is provided below."
  },
  {
    "type": "h3",
    "content": "Overview of the TradingState class"
  },
  {
    "type": "p",
    "content": "The TradingState class holds all the important market information that an algorithm needs to make decisions about which orders to send. Below the definition is provided for the TradingState class:"
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_2",
    "file_path": "code/overview_of_tradingstate_class.py",
    "preview": "Time = int\nSymbol = str\nProduct = str\nPosition = i..."
  },
  {
    "type": "p",
    "content": "The most important properties"
  },
  {
    "type": "list",
    "style": "bulleted",
    "items": [
      {
        "content": "own_trades: the trades the algorithm itself has done since the last TradingState came in. This property is a dictionary of Trade objects with key being a product name. The definition of the Trade class is provided in the subsections below.",
        "level": 0
      },
      {
        "content": "market_trades: the trades that other market participants have done since the last TradingState came in. This property is also a dictionary of Trade objects with key being a product name.",
        "level": 0
      },
      {
        "content": "position: the long or short position that the player holds in every tradable product. This property is a dictionary with the product as the key for which the value is a signed integer denoting the position.",
        "level": 0
      },
      {
        "content": "order_depths: all the buy and sell orders per product that other market participants have sent and that the algorithm is able to trade with. This property is a dict where the keys are the products and the corresponding values are instances of the OrderDepth class. This OrderDepth class then contains all the buy and sell orders. An overview of the OrderDepth class is also provided in the subsections below.",
        "level": 0
      }
    ]
  },
  {
    "type": "p",
    "content": "Both the own_trades property and the market_trades property provide the traders with a list of trades per products. Every individual trade in each of these lists is an instance of the Trade class."
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_3",
    "file_path": "code/trade_class.py",
    "preview": "Symbol = str\nUserId = str\nclass Trade:\ndef __init_..."
  },
  {
    "type": "p",
    "content": "These trades have five distinct properties:"
  },
  {
    "type": "list",
    "style": "numbered",
    "items": [
      {
        "content": "The symbol/product that the trade corresponds to (i.e. are we exchanging apples or oranges)",
        "level": 0
      },
      {
        "content": "The price at which the product was exchanged",
        "level": 0
      },
      {
        "content": "The quantity that was exchanged",
        "level": 0
      },
      {
        "content": "The identity of the buyer in the transaction",
        "level": 0
      },
      {
        "content": "The identity of the seller in this transaction",
        "level": 0
      }
    ]
  },
  {
    "type": "p",
    "content": "On the island exchange, like on most real-world exchanges, counterparty information is typically not disclosed. Therefore properties 4 and 5 will only be non-empty strings if the algorithm itself is the buyer (4 will be ‚ÄúSUBMISSION‚Äù) or the seller (5 will be ‚ÄúSUBMISSION‚Äù)."
  },
  {
    "type": "p",
    "content": "Provided by the TradingState class is also the OrderDepth per symbol. This object contains the collection of all outstanding buy and sell orders, or ‚Äúquotes‚Äù that were sent by the trading bots, for a certain symbol."
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_4",
    "file_path": "code/orderdepth_class.py",
    "preview": "class OrderDepth:\ndef __init__(self):\n        self..."
  },
  {
    "type": "p",
    "content": "All the orders on a single side (buy or sell) are aggregated in a dict, where the keys indicate the price associated with the order, and the corresponding keys indicate the total volume on that price level. For example, if the buy_orders property would look like this for a certain product {9: 5, 10: 4} That would mean that there is a total buy order quantity of 5 at the price level of 9, and a total buy order quantity of 4 at a price level of 10. Players should note that in the sell_orders property, the quantities specified will be negative. E.g., {12: -3, 11: -2} would mean that the aggregated sell order volume at price level 12 is 3, and 2 at price level 11."
  },
  {
    "type": "p",
    "content": "Every price level at which there are buy orders should always be strictly lower than all the levels at which there are sell orders. If not, then there is a potential match between buy and sell orders, and a trade between the bots should have happened."
  },
  {
    "type": "p",
    "content": "Observation details help to decide on eventual orders or conversion requests. There are two items delivered inside the TradingState instance:"
  },
  {
    "type": "list",
    "style": "numbered",
    "items": [
      {
        "content": "Simple product to value dictionary inside plainValueObservations",
        "level": 0
      },
      {
        "content": "Dictionary of complex ConversionObservation values for respective products. Used to place conversion requests from Trader class. Structure visible below.",
        "level": 0
      }
    ]
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_5",
    "file_path": "code/observation_class.py",
    "preview": "class ConversionObservation:\ndef __init__(self, bi..."
  },
  {
    "type": "p",
    "content": "In case you decide to place conversion request on product listed integer number should be returned as ‚Äúconversions‚Äù value from run() method. Based on logic defined inside Prosperity container it will convert positions acquired by submitted code. There is a number of conditions for conversion to  happen:"
  },
  {
    "type": "list",
    "style": "bulleted",
    "items": [
      {
        "content": "You need to obtain either long or short position earlier.",
        "level": 0
      },
      {
        "content": "Conversion request cannot exceed the minimum of possessed items count and conversion limit.",
        "level": 0
      },
      {
        "content": "In case you have 10 items short (-10) and conversion limit is 5, you can only request from 1 to 5. Request for 6 or more will be fully ignored.",
        "level": 0
      },
      {
        "content": "While conversion happens you will need to cover transportation and import/export tariff.",
        "level": 0
      },
      {
        "content": "Conversion request is not mandatory. You can send 0 or None as value.",
        "level": 0
      }
    ]
  },
  {
    "type": "h3",
    "content": "How to send orders using the Order class"
  },
  {
    "type": "p",
    "content": "After performing logic on the incoming order state, the run method defined by the player should output a dictionary containing the orders that the algorithm wants to send. The keys of this dictionary should be all the products that the algorithm wishes to send orders for. These orders should be instances of the Order class. Each order has three important properties. These are:"
  },
  {
    "type": "list",
    "style": "numbered",
    "items": [
      {
        "content": "The symbol of the product for which the order is sent.",
        "level": 0
      },
      {
        "content": "The price of the order: the maximum price at which the algorithm wants to buy in case of a BUY order, or the minimum price at which the algorithm wants to sell in case of a SELL order.",
        "level": 0
      },
      {
        "content": "The quantity of the order: the maximum quantity that the algorithm wishes to buy or sell. If the sign of the quantity is positive, the order is a buy order, if the sign of the quantity is negative it is a sell order.",
        "level": 0
      }
    ]
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_6",
    "file_path": "code/send_orders_using_order_class.py",
    "preview": "Symbol = str\nclass Order:\ndef __init__(self, symbo..."
  },
  {
    "type": "p",
    "content": "If there are active orders from counterparties for the same product against which the algorithms‚Äô orders can be matched, the algorithms‚Äô order will be (partially) executed right away. If no immediate or partial execution is possible, the remaining order quantity will be visible for the bots in the market, and it might be that one of them sees it as a good trading opportunity and will trade against it. If none of the bots decides to trade against the remaining order quantity, it is cancelled. Note that after cancellation of the algorithm‚Äôs orders but before the next Tradingstate comes in, bots might also trade with each other.\n\nNote that on the island exchange players‚Äô execution is infinitely fast, which means that all their orders arrive in the exchange matching engine without any delay. Therefore, all the orders that a player sends that can be immediately matched with an order from one of the bots, will be matched and result in a trade. In other words, none of the bots can send an order that is faster than the player‚Äôs order and get the opportunity instead."
  },
  {
    "type": "p",
    "content": "See Trading Glossary for a more elaborate explanation of order execution in financial markets."
  },
  {
    "type": "p",
    "content": "Just like in the real world of trading, there are position limits, i.e. limits to the size of the position that the algorithm can trade into in a single product. These position limits are defined on a per-product basis, and refer to the absolute allowable position size. So for a hypothetical position limit of 10, the position can neither be greater than 10 (long) nor less than -10 (short). On the Prosperity Island exchange, this position limit is enforced by the exchange. If at any iteration, the player‚Äôs algorithm tries to send buy (sell) orders for a product with an aggregated quantity that would cause the player to go over long (short) position limits if all orders would be fully executed, all orders will be rejected automatically. For example, the position limit in product X is 30 and the current position is -5, then any aggregated buy order volume exceeding 30 - (-5) = 35 would result in an order rejection."
  },
  {
    "type": "p",
    "content": "For an overview of the per-product position limit players are referred to the ‚ÄòRounds‚Äô section on Prosperity 3 Wiki."
  },
  {
    "type": "p",
    "content": "Below two example iterations are provided to give an idea what the simulation behaviour looks like."
  },
  {
    "type": "h3",
    "content": "Example of Trading"
  },
  {
    "type": "p",
    "content": "For the following example we assume a situation with two products:"
  },
  {
    "type": "list",
    "style": "bulleted",
    "items": [
      {
        "content": "PRODUCT1 with position limit 10",
        "level": 0
      },
      {
        "content": "PRODUCT2 with position limit 20",
        "level": 0
      }
    ]
  },
  {
    "type": "p",
    "content": "At the start of the first iteration the run method is called with the TradingState generated by the below code. Note: the datamodel.py file from which the classes are imported is provided in Appendix B. The code can also be used to test algorithms locally."
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_7",
    "file_path": "code/tradingexample-initial_tradingstate_setup.py",
    "preview": "from datamodel import Listing, OrderDepth, Trade, ..."
  },
  {
    "type": "p",
    "content": "Let‚Äôs say that at this point in the simulation, the algorithm has the following convictions:"
  },
  {
    "type": "list",
    "style": "numbered",
    "items": [
      {
        "content": "PRODUCT1 is worth 13",
        "level": 0
      },
      {
        "content": "PRODUCT2 is worth 142",
        "level": 0
      }
    ]
  },
  {
    "type": "p",
    "content": "It could then potentially decide on the following"
  },
  {
    "type": "list",
    "style": "numbered",
    "items": [
      {
        "content": "Since the sell orders in PRODUCT1 at price 11 (qty 4) and price 12 (qty 8) are both below the algorithms calculated fair value, it would like to send a buy order to trade with these sell orders. Given that the position in PRODUCT2 is already 3 long and the position limit is set at 10, sending one or more buy orders with an aggregated quantity of >7 would result in rejection of all buy orders, the algorithm sends a buy order with quantity 7 and a price of 12.",
        "level": 0
      },
      {
        "content": "Versus the fair value of 142 neither the sell orders nor the buy orders look profitable. The algorithm therefore decides to see if any of the bots is willing to buy at 143, and sends a sell order of quantity 5 at that price level.",
        "level": 0
      }
    ]
  },
  {
    "type": "p",
    "content": "Based on the above the run method output would then be generated as shown below:"
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_8",
    "file_path": "code/tradingexample-example_algorithm_output-run_method_result.py",
    "preview": "result[\"PRODUCT1\"] = [Order(\"PRODUCT1\", 12, 7)]\nre..."
  },
  {
    "type": "p",
    "content": "An example of what the next TradingState will look like is generated by the code below."
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_9",
    "file_path": "code/tradingexample-next_tradingstate_after_execution.py",
    "preview": "from datamodel import Listing, OrderDepth, Trade, ..."
  },
  {
    "type": "p",
    "content": "A few observations can be made from this TradingState's properties:"
  },
  {
    "type": "list",
    "style": "numbered",
    "items": [
      {
        "content": "The algorithm‚Äôs buy orders for ‚ÄúPRODUCT1‚Äù matched first with the full quantity of the sell order at price 11. As a result the order is now gone from the order_depths and a corresponding own_trade is created.",
        "level": 0
      },
      {
        "content": "The remaining order quantity of 3 then matched with part of the order at price 12, resulting in a second trade at price 12. As can be seen in the order_depths the quantity of the corresponding sell order is now reduced by 3 as well.",
        "level": 0
      },
      {
        "content": "For ‚ÄúPRODUCT2‚Äù a trade at price 143 with a quantity 2 can be observed, which indicates that one of the bots decided to send a buy order of quantity 2 as a reaction to the player‚Äôs sell order at that price level. For the player‚Äôs initial order this means that a quantity of 3 of the 5 total remains unexecuted. None of the bots decides to trade against this order, and the full order quantity is automatically cancelled.",
        "level": 0
      }
    ]
  },
  {
    "type": "h3",
    "content": "Technical Notes"
  },
  {
    "type": "p",
    "content": "There are a few technicalities that players should take into account when writing an algorithms:"
  },
  {
    "type": "list",
    "style": "numbered",
    "items": [
      {
        "content": "Only the libraries noted at the bottom of this page under ‚ÄúSupported Libraries‚Äù are allowed to be used by the algorithm. These are listed in Appendix C.",
        "level": 0
      },
      {
        "content": "Each time the ‚Äúrun‚Äù method is called, it should generate a response in <900ms, otherwise the function call will time out. Players should make sure that their algorithms are sufficiently lightweight to make sure this requirement is met.",
        "level": 0
      }
    ]
  },
  {
    "type": "h3",
    "content": "Available Resources to Help Build the Algorithm"
  },
  {
    "type": "p",
    "content": "To aid players in building the algorithm several resources are made available:"
  },
  {
    "type": "list",
    "style": "numbered",
    "items": [
      {
        "content": ".csv file with trade example",
        "level": 0
      },
      {
        "content": ".csv file with market orders example",
        "level": 0
      },
      {
        "content": "When players upload their algorithms on the Prosperity platform, the algorithm is tested for 1000 iterations using data from a sample day (different than the actual day that will be used for the challenge). After the run a log file is provided which can aid players in debugging their algorithms. To aid debugging, the log file also contains the output of any print statements that players put within the run method of their trading class.",
        "level": 0
      }
    ]
  },
  {
    "type": "h3",
    "content": "Appendix A: Trader Class Example"
  },
  {
    "type": "p",
    "content": "Below an example of an implementation of the Trader class is provided. While very simple and likely not profitable, this example algorithm does include all the necessary logic to send orders for the first day‚Äôs ‚ÄúPEARLS‚Äù product (see the page that describes the first round)."
  },
  {
    "type": "p",
    "content": "‚¨áÔ∏è¬†Download"
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_10",
    "file_path": "code/appendix_A_trader_class_example.py",
    "preview": "from datamodel import OrderDepth, UserId, TradingS..."
  },
  {
    "type": "h3",
    "content": "Appendix B: datamodel.py file"
  },
  {
    "type": "code",
    "language": "python",
    "code_id": "code_11",
    "file_path": "code/datamodel.py",
    "preview": "import json\nfrom typing import Dict, List\nfrom jso..."
  },
  {
    "type": "h3",
    "content": "Appendix C: Supported libraries"
  },
  {
    "type": "p",
    "content": "The following libraries are supported in the simulation. Importing other external libraries is not supported."
  },
  {
    "type": "p",
    "content": "pandas"
  },
  {
    "type": "p",
    "content": "NumPy"
  },
  {
    "type": "p",
    "content": "statistics"
  },
  {
    "type": "p",
    "content": "math"
  },
  {
    "type": "p",
    "content": "typing"
  },
  {
    "type": "p",
    "content": "jsonpickle"
  }
]